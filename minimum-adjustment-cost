/*Given an array arr[] of positive integers of size N and an integer target, replace each element in the array such that the difference between adjacent elements in the array is less than or equal to a given target. We need to minimize the adjustment cost, that is the sum of differences between new and old values. We basically need to minimize ∑|A[i] – Anew[i]| where 0 <= i <= n-1, n is size of A[] and Anew[] is the array with adjacent difference less than or equal to target.Assume all elements of the array is less than constant M = 100.
 
Example 1:

Input: N = 4, target = 1
arr[] = { 1, 3, 0, 3 }
Output: 3
Explanation: One of the possible 
solutions is [2, 3, 2, 3].

Example 2:

Input: N = 4, target = 1
arr[] = {2, 3, 2, 3}
Output: 0
Explanation: All adjacent elements 
in the input array are already less 
than equal to given target.


Your Task:
This is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function minAdjustmentCost() that takes array arr[] , integer n, and integer target as parameters and returns the minimum adjustment cost.

 

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

 

Constraints:
1 ≤ N ≤ 102*/


//Solution

#include <bits/stdc++.h>
using namespace std;
#define M 100

int minAdjustmentCost(int A[], int n, int target)
{
	int dp[n][M + 1];

	for (int j = 0; j <= M; j++)
		dp[0][j] = abs(j - A[0]);

	for (int i = 1; i < n; i++)
	{
		for (int j = 0; j <= M; j++)
		{
		dp[i][j] = INT_MAX;

		for (int k = max(j-target,0); k <= min(M,j+target); k++)
			dp[i][j] = min(dp[i][j], dp[i - 1][k] + abs(A[i] - j));
		}
	}

	int res = INT_MAX;
	for (int j = 0; j <= M; j++)
		res = min(res, dp[n - 1][j]);

	return res;
}
int main()
{
	int arr[] = {55, 77, 52, 61, 39, 6, 25, 60, 49, 47};
	int n = sizeof(arr) / sizeof(arr[0]);
	int target = 10;

	cout << "Minimum adjustment cost is "
		<< minAdjustmentCost(arr, n, target) << endl;

	return 0;
}
